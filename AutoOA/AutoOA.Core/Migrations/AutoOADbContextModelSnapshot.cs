// <auto-generated />
using System;
using AutoOA.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoOA.Core.Migrations
{
    [DbContext(typeof(AutoOADbContext))]
    partial class AutoOADbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoOA.Core.BodyType", b =>
                {
                    b.Property<int>("BodyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BodyTypeId"), 1L, 1);

                    b.Property<string>("BodyTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BodyTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("BodyTypes");

                    b.HasData(
                        new
                        {
                            BodyTypeId = 1,
                            BodyTypeName = "Седан",
                            VehicleId = 1
                        },
                        new
                        {
                            BodyTypeId = 2,
                            BodyTypeName = "Універсал",
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("AutoOA.Core.FuelType", b =>
                {
                    b.Property<int>("FuelTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuelTypeId"), 1L, 1);

                    b.Property<string>("FuelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("FuelTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("FuelTypes");

                    b.HasData(
                        new
                        {
                            FuelTypeId = 1,
                            FuelName = "Дизель",
                            VehicleId = 1
                        },
                        new
                        {
                            FuelTypeId = 2,
                            FuelName = "Бензин",
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("AutoOA.Core.GearBox", b =>
                {
                    b.Property<int>("GearBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GearBoxId"), 1L, 1);

                    b.Property<string>("GearBoxName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("GearBoxId");

                    b.HasIndex("VehicleId");

                    b.ToTable("GearBoxes");

                    b.HasData(
                        new
                        {
                            GearBoxId = 1,
                            GearBoxName = "Механіка",
                            VehicleId = 1
                        },
                        new
                        {
                            GearBoxId = 2,
                            GearBoxName = "Автомат",
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GearBoxId")
                        .HasColumnType("int");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<bool>("isNew")
                        .HasColumnType("bit");

                    b.HasKey("VehicleId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            BodyTypeId = 1,
                            Color = "Black",
                            FuelTypeId = 1,
                            GearBoxId = 1,
                            IconPath = "Images\\w220cidan - Copy.png",
                            Mileage = 90000,
                            Price = 15000m,
                            VehicleModelId = 1,
                            isNew = true
                        },
                        new
                        {
                            VehicleId = 2,
                            BodyTypeId = 2,
                            Color = "Gray",
                            FuelTypeId = 2,
                            GearBoxId = 2,
                            IconPath = "Images\\320Universal.png",
                            Mileage = 320000,
                            Price = 9000m,
                            VehicleModelId = 2,
                            isNew = false
                        });
                });

            modelBuilder.Entity("AutoOA.Core.VehicleBrand", b =>
                {
                    b.Property<int>("VehicleBrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleBrandId"), 1L, 1);

                    b.Property<string>("VehicleBrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleBrandId");

                    b.ToTable("VehicleBrands");

                    b.HasData(
                        new
                        {
                            VehicleBrandId = 1,
                            VehicleBrandName = "Mercedes"
                        },
                        new
                        {
                            VehicleBrandId = 2,
                            VehicleBrandName = "BMW"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleModelId"), 1L, 1);

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleBrandId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleModelName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("VehicleBrandId");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            VehicleModelId = 1,
                            ProductionDate = new DateTime(2022, 10, 17, 20, 51, 14, 364, DateTimeKind.Local).AddTicks(2958),
                            VehicleBrandId = 1,
                            VehicleModelName = "E 220"
                        },
                        new
                        {
                            VehicleModelId = 2,
                            ProductionDate = new DateTime(2022, 10, 17, 20, 51, 14, 364, DateTimeKind.Local).AddTicks(2988),
                            VehicleBrandId = 2,
                            VehicleModelName = "320"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "37c9bd7d-4377-4d89-bf45-0b710e15ff8f",
                            ConcurrencyStamp = "8b1c3cfc-1d6d-49ac-b9da-d4e29d9fc1a8",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "01072ea4-4430-4232-a9f9-6472f675e268",
                            ConcurrencyStamp = "3eca5e08-ec24-4f47-b3a7-d4eda1ab0678",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "85fea4e3-adea-4d44-bd4c-0dcad2d269de",
                            RoleId = "37c9bd7d-4377-4d89-bf45-0b710e15ff8f"
                        },
                        new
                        {
                            UserId = "85fea4e3-adea-4d44-bd4c-0dcad2d269de",
                            RoleId = "01072ea4-4430-4232-a9f9-6472f675e268"
                        },
                        new
                        {
                            UserId = "0459c771-f96b-4156-93da-c8b837574bcc",
                            RoleId = "01072ea4-4430-4232-a9f9-6472f675e268"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoOA.Core.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "85fea4e3-adea-4d44-bd4c-0dcad2d269de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2e5b9d9-e6a8-43e0-b095-7e2f6c0e30b9",
                            Email = "admin@autooa.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@AUTOOA.COM",
                            NormalizedUserName = "ADMIN@AUTOOA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBPIoZ6R6tnaS684OuYhWALgG/TuIXv59T11tyznr8rnqHTjeto1UcwqEww9hvRomw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa5e3515-3a7e-44dc-a8f2-3f3a6ab05792",
                            TwoFactorEnabled = false,
                            UserName = "admin@autooa.com"
                        },
                        new
                        {
                            Id = "0459c771-f96b-4156-93da-c8b837574bcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd992920-b6f4-4090-a131-d55e1d48e0d2",
                            Email = "user@autooa.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@AUTOOA.COM",
                            NormalizedUserName = "USER@AUTOOA.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENDQFQkSwg0K6Qr4Vh1pHBqERO+1cNp5ay9wqDVSj4WxAmzpLgYhJeHb7UKEIVI6OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0d8dc7f-b27f-4331-bc24-75aeaed8c926",
                            TwoFactorEnabled = false,
                            UserName = "user@autooa.com"
                        });
                });

            modelBuilder.Entity("AutoOA.Core.BodyType", b =>
                {
                    b.HasOne("AutoOA.Core.Vehicle", "Vehicle")
                        .WithMany("BodyTypes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.FuelType", b =>
                {
                    b.HasOne("AutoOA.Core.Vehicle", "Vehicle")
                        .WithMany("FuelTypes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.GearBox", b =>
                {
                    b.HasOne("AutoOA.Core.Vehicle", "Vehicle")
                        .WithMany("GearBoxes")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.HasOne("AutoOA.Core.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.HasOne("AutoOA.Core.VehicleBrand", null)
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoOA.Core.Vehicle", b =>
                {
                    b.Navigation("BodyTypes");

                    b.Navigation("FuelTypes");

                    b.Navigation("GearBoxes");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleBrand", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("AutoOA.Core.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
